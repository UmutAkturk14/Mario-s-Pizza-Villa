<div class="relative inline-block">
  <% full_name = "#{current_user.first_name} #{current_user.last_name}" %>
  <% order = Order.find_or_create_by(user: current_user, status: "pending") %>
  <!-- Dropdown toggle button -->
  <div class="relative text-gray-600 bg-white border border-transparent rounded-md   dark:focus:ring-0  dark:text-white dark:bg-gray-800 focus:outline-none flex justify-center p-2 " id="cart-icon">
    <svg xmlns="http://www.w3.org/2000/svg" class="bi bi-cart3 w-5 h-5 fill-gray-300" viewBox="0 0 16 16"><title>Checkout</title> <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .49.598l-1 5a.5.5 0 0 1-.465.401l-9.397.472L4.415 11H13a.5.5 0 0 1 0 1H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM3.102 4l.84 4.479 9.144-.459L13.89 4H3.102zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/> </svg>
    <%# TODO: If there's items in the cart %>
    <% cart = current_user.orders.find_by(status: :pending) %>
    <button id="notification-bubble" class="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full hidden"></button>
  </div>

  <!-- Dropdown menu -->
  <div class="absolute right-0 z-20 w-80 pt-2 mt-2 overflow-hidden bg-white rounded-md shadow-xl dark:bg-gray-800 hidden" id="cart-dropdown">
    <article class="flex items-center p-3 -mt-2 text-sm text-gray-600 transition-colors duration-200 transform dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 dark:hover:text-white">
        <div class="mx-1">
          <h1 class="text-lg font-semibold text-gray-700 dark:text-gray-200">Your cart</h1>
        </div>
    </article>

    <hr class="border-gray-200 dark:border-gray-700 ">

    <% order.order_items.each do |order_item| %>
      <article class="px-4 py-3 text-sm text-gray-600 capitalize transition-colors duration-200 transform dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 dark:hover:text-white flex order-<%=order_item.id%> <%= order_item.item.title.split.join("-") %> ">

        <% if order_item.item.image.attached? %>
          <%= cl_image_tag order_item.item.image.key, class: "flex-shrink-0 object-cover mx-1 rounded-lg  w-12 h-12 z-50" %>
        <% else %>
          <img src="https://images.unsplash.com/photo-1594007654729-407eedc4be65?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1928&q=80" alt="" class="flex-shrink-0 object-cover mx-1 rounded-lg  w-12 h-12 z-50">
        <% end %>
        <div class="flex flex-col flex-grow ml-2">
          <%= tag.p "#{order_item.item.title} (#{order_item.quantity})", class: "text-white" %>
        </div>
        <div class="flex flex-col items-end justify-between">
          <%# TODO: Bin icon %>
          <svg id="order-<%= order_item.id %>" xmlns="http://www.w3.org/2000/svg" class="w-3.5 h-3.5" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-trash-2 ">
            <polyline points="3 6 5 6 21 6"></polyline>
            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
            <line x1="10" y1="11" x2="10" y2="17"></line>
            <line x1="14" y1="11" x2="14" y2="17"></line>
          </svg>
          <%# TODO: Price %>
          <%= tag.p "$ #{order_item.item.price * order_item.quantity}", class: "font-bold text-sm text-white bg-gray-600 p-0.5 px-2 rounded-lg #{order_item.item.title.split.join("-")}-price" %>
        </div>

      </article>

    <% end %>

    <hr class="border-gray-200 dark:border-gray-700 ">

    <section class="bg-gray-700 flex justify-between">
      <p class="text-white ml-2">Total price :</p>
      <p id="total-price" class="text-white mr-2 font-bold">$ <%= order.total_price.to_f %></p>
    </section>
    <% order = Order.find_by(user: current_user, status: :pending) %>
    <%# TODO: Add link to checkout page %>
    <%= button_to finish_purchase_path(order), method: :post, class: "w-full" do  %>
      <section class="bg-gradient-to-br from-orange-500 to-orange-800  text-white hover:bg-gradient-to-br hover:from-orange-400 hover:to-orange-600 flex justify-center font-lg font-heading p-2 rounded-lg">
        <p>Checkout</p>
      </section>
    <% end %>

  </div>
</div>

<script>
  $(document).ready(function () {
    // Activate notification bubble if there's items in the cart
    if ($("#cart-dropdown").children().length > 5) {
      $("#notification-bubble").fadeIn();
    }
    // Click event to toggle the cart dropdown
    $("#cart-icon").click(function () {
      $("#profile-dropdown").hide();
      $("#order-dropdown").hide();
      $("#cart-dropdown").slideToggle(200);
    });

    // Click event for removing order items
    $("#cart-dropdown").on('click', 'svg[id^="order-"]', function(e) {
      e.preventDefault();
      let svgId = $(this).attr('id');
      let orderItemId = svgId.replace('order-', '');

      let orderItem = $(`.order-${orderItemId} p:first`);
      let text = orderItem.text();
      let orderPrice = $(`.${text.split("(")[0].replace(/ /g, "-")}price`);

      let match = text.match(/\((\d+)\)/);
      let valueInsideParentheses = parseInt(match[1], 10);

      let orderItemPriceString = $(this).next().text();
      let orderItemPriceTotal = parseFloat(orderItemPriceString.replace('$ ', ''));
      let orderItemUnitPrice = orderItemPriceTotal / valueInsideParentheses;

      let cartPriceString = $("#total-price").text();
      let cartPriceValue = parseFloat(cartPriceString.replace('$ ', ''));

      if (confirm('Are you sure you want to remove this item?')) {
        $.ajax({
          type: 'DELETE',
          url: '/order_items/' + orderItemId,
          headers: {
            "X-CSRF-Token": $('meta[name="csrf-token"]').attr("content"),
          },
          success: function(data) {
            // Handle a successful removal, e.g., remove the element from the DOM.
            if (valueInsideParentheses === 1) {
              $(`.order-${orderItemId}`).fadeOut(function() {
                $(this).remove();
                if ($("#cart-dropdown").children().length === 5) {
                  $("#notification-bubble").fadeOut();
                  $("#cart-dropdown").slideToggle(200);
                }
              });

            } else {
              let newValue = valueInsideParentheses - 1;
              let newText = text.replace(/\(\d+\)/, `(${newValue})`);
              orderItem.text(newText);
              orderPrice.text(`$ ${(orderItemPriceTotal - orderItemUnitPrice).toFixed(2)}`);
            }

            let newValue = (cartPriceValue - orderItemUnitPrice).toFixed(2);
            $("#total-price").text(`$ ${newValue}`);
          },
          error: function(jqXHR, textStatus, errorThrown) {
            console.error('Item removal failed: ' + textStatus);
          }
        });
      }
    });

    // Click event for adding order items
    $(".add-button").click(function(e) {
      e.preventDefault();

      const itemIDString = $(this).attr("itemID");
      const itemID = parseInt(itemIDString, 10);
      const image = "https://images.unsplash.com/photo-1594007654729-407eedc4be65?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1928&q=80";
      const element = $(this).parents().find('.font-heading.text-xl')[itemID - 1];
      const title = $(element).text();
      const titleForArticle = title.split(' ').join('-');
      const priceElement = $(this).parents().find('.xl\\:text-xl.font-bold')[itemID - 1];
      const priceText = $(priceElement).text().trim();

      let orderItemUnitPrice = parseFloat(priceText.replace('$ ', ''));

      let cartPriceString = $("#total-price").text();
      let cartPriceValue = parseFloat(cartPriceString.replace('$ ', ''));

      console.log(titleForArticle);

      $.ajax({
        type: "POST",
        url: $(this).attr("path"),
        headers: {
          "X-CSRF-Token": $('meta[name="csrf-token"]').attr("content"),
        },
        success: function (response) {
          // Extract the new order item from the response
          const responseHTML = $(response);
          const newItem = responseHTML.find("#cart-dropdown article:last");

          // Append the new item HTML to the container
          $("#cart-dropdown").slideDown(200);

          if ($(`.${titleForArticle}`).length > 0) {
            // Existing cart item in the dropdown
            const cartItem = $(`.${titleForArticle}`);
            const cartItemTitle = $(`.${titleForArticle} p:first`).text();
            const match = cartItemTitle.match(/\d+/);
            const itemQuantity = cartItemTitle.replace("$ ", "");
            const quantityInt = parseInt(match[0]);
            $(`.${titleForArticle} p:first`).text(`${titleForArticle.split("-").join(" ")} (${quantityInt + 1})`);
            const itemPriceString = $(`.${titleForArticle} p:last`).text();
            const itemPriceNumeric = parseFloat(itemPriceString.replace('$ ', ''));
            const newPrice = itemPriceNumeric + orderItemUnitPrice;
            $(`.${titleForArticle} p:last`).text(`$ ${newPrice.toFixed(2)}`);
          } else {
            // Append the new item to the cart dropdown
            $("#cart-dropdown hr:last").prev().before(newItem.hide().fadeIn());

            $("#notification-bubble").fadeIn();
          }

          // Update the total price
          let newValue = (cartPriceValue + orderItemUnitPrice).toFixed(2);
          $("#total-price").text(`$ ${newValue}`);
        },
        error: function (error) {
          console.error("Error:", error);
        },
      });
    });

    // Hide the profile dropdown when the mouse leaves
    $("#profile-dropdown").mouseleave(function () {
      $("#profile-dropdown").slideUp(200);
    });
  });


</script>
